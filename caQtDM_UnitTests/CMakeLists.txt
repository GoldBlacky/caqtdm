cmake_minimum_required(VERSION 3.5)
set(CMAKE_CXX_STANDARD 11)

project(caQtDM_UnitTests)

set(BUILD_SHARED_LIBS OFF)

if (WIN32)
	# Prefer static libraries on Windows
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")

	set(CAQTDMBINARIESNAME "caQtDM_Binaries_64Bit")
	if (NOT "$ENV{GTESTHOME}" STREQUAL "")
		list(APPEND CMAKE_PREFIX_PATH "$ENV{GTESTHOME}")
		set(GTESTLIB "$ENV{GTESTHOME}/lib/Debug")
	else()
		list(APPEND CMAKE_PREFIX_PATH "D:/Google_tests")
		set(GTESTLIB "D:/Google_tests/lib/Debug")
	endif()
	if (NOT "$ENV{GTESTINCLUDE}" STREQUAL "")
		set(GTESTINCLUDE "$ENV{GTESTINCLUDE}")
	else()
		set(GTESTINCLUDE "D:/Google_tests/googletest/include")
	endif()
	if (NOT "$ENV{QTHOME}" STREQUAL "")
		list(APPEND CMAKE_PREFIX_PATH "$ENV{QTHOME}")
		set(QTINCLUDE "$ENV{QTHOME}/include")
	else()
		list(APPEND CMAKE_PREFIX_PATH "D:/qt/build/Qt-6.5.1_VS22_64bit")
		set(QTINCLUDE "D:/qt/build/Qt-6.5.1_VS22_64bit/include")
	endif()
	if (NOT "$ENV{QWINCLUDE}" STREQUAL "")
		set(QWTINCLUDE "$ENV{QWTINCLUDE}")
	else()
		set(QWTINCLUDE "D:/qt/qwt-6.2.0/src")
	endif()
	if (NOT "$ENV{QWTLIB}" STREQUAL "")
		set(QWTLIB "$ENV{QWTLIB}")
	else()
		set(QWTLIB "D:/qt/qwt-6.2.0/lib")
	endif()
	if (NOT "$ENV{QWTLIBNAME}" STREQUAL "")
		set(QWTLIBNAME "$ENV{QWTLIBNAME}")
	else()
		set(QWTLIBNAME "qwt")
	endif()
else()
	set(CAQTDMBINARIESNAME "caQtDM_Binaries")
	if (NOT "$ENV{GTESTINCLUDE}" STREQUAL "")
		set(GTESTINCLUDE "$ENV{GTESTINCLUDE}")
	else()
		set(GTESTINCLUDE "/usr/include/gtest")
	endif()
	if (NOT "$ENV{QTHOME}" STREQUAL "")
		set(QTINCLUDE "$ENV{QTHOME}/include/qt5")
	else()
		set(QTINCLUDE "/usr/include/qt5/")
	endif()
	if (NOT "$ENV{QWINCLUDE}" STREQUAL "")
		set(QWTINCLUDE "$ENV{QWTINCLUDE}")
	else()
		set(QWTINCLUDE "/usr/include/qt5/qwt")
	endif()
	if (NOT "$ENV{QWTLIB}" STREQUAL "")
		set(QWTLIB "$ENV{QWTLIB}")
	else()
		set(QWTLIB "/usr/lib64")
	endif()
	if (NOT "$ENV{QWTLIBNAME}" STREQUAL "")
		set(QWTLIBNAME "$ENV{QWTLIBNAME}")
	else()
		set(QWTLIBNAME "qwt-qt5")
	endif()
endif()

find_package(Threads REQUIRED)
find_package(Qt6 COMPONENTS Core)
if (NOT Qt6_FOUND)
	find_package(Qt5 REQUIRED COMPONENTS Core)
	find_package(Qt5 REQUIRED COMPONENTS Widgets)
	find_package(Qt5 REQUIRED COMPONENTS Gui)
	find_package(Qt5 REQUIRED COMPONENTS Network)
	find_package(Qt5 REQUIRED COMPONENTS UiTools)
else()
	find_package(Qt6 REQUIRED COMPONENTS Widgets)
	find_package(Qt6 REQUIRED COMPONENTS Gui)
	find_package(Qt6 REQUIRED COMPONENTS Network)
	find_package(Qt6 REQUIRED COMPONENTS UiTools)
endif()

add_subdirectory(Test_caQtDM_Plugins)
add_subdirectory(Test_caQtDM_QtControls)
